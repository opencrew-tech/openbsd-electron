Index: modcargo-crates/cubeb-sys-0.27.0/build.rs
--- modcargo-crates/cubeb-sys-0.27.0/build.rs.orig
+++ modcargo-crates/cubeb-sys-0.27.0/build.rs
@@ -33,7 +33,7 @@ fn main() {
         return;
     }
 
-    let _ = fs::remove_dir_all(env::var("OUT_DIR").unwrap());
+    // let _ = fs::remove_dir_all(env::var("OUT_DIR").unwrap());
     t!(fs::create_dir_all(env::var("OUT_DIR").unwrap()));
 
     env::remove_var("DESTDIR");
@@ -77,6 +77,7 @@ fn main() {
     let windows = target.contains("windows");
     let darwin = target.contains("darwin");
     let freebsd = target.contains("freebsd");
+    let openbsd = target.contains("openbsd");
     let android = target.contains("android");
     let mut cfg = cmake::Config::new(&libcubeb_path);
 
@@ -144,7 +145,7 @@ fn main() {
 
         println!("cargo:rustc-link-search=native={}/lib", dst.display());
     } else {
-        if freebsd || android {
+        if freebsd || android || openbsd {
             println!("cargo:rustc-link-lib=dylib=c++");
         } else {
             println!("cargo:rustc-link-lib=dylib=stdc++");
@@ -155,22 +156,22 @@ fn main() {
         // Ignore the result of find_library. We don't care if the
         // libraries are missing.
         let _ = pkg_config::find_library("alsa");
-        if pkg_config::find_library("libpulse").is_ok() {
-            // Do not link the rust backends for tests: doing so causes duplicate
-            // symbol definitions.
-            if build_rust_libs {
-                println!("cargo:rustc-link-lib=static=cubeb_pulse");
-                let mut search_path = std::env::current_dir().unwrap();
-                search_path.push(&(libcubeb_path + "/src/cubeb-pulse-rs/target"));
-                search_path.push(&target);
-                if debug {
-                    search_path.push("debug");
-                } else {
-                    search_path.push("release");
-                }
-                println!("cargo:rustc-link-search=native={}", search_path.display());
-            }
-        }
+        // if pkg_config::find_library("libpulse").is_ok() {
+        //     // Do not link the rust backends for tests: doing so causes duplicate
+        //     // symbol definitions.
+        //     if build_rust_libs {
+        //         println!("cargo:rustc-link-lib=static=cubeb_pulse");
+        //         let mut search_path = std::env::current_dir().unwrap();
+        //         search_path.push(&(libcubeb_path + "/src/cubeb-pulse-rs/target"));
+        //         search_path.push(&target);
+        //         if debug {
+        //             search_path.push("debug");
+        //         } else {
+        //             search_path.push("release");
+        //         }
+        //         println!("cargo:rustc-link-search=native={}", search_path.display());
+        //     }
+        // }
         let _ = pkg_config::find_library("jack");
         let _ = pkg_config::find_library("speexdsp");
         if android {
