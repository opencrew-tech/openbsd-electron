Same as chromium, return ELECTRON_EXE_PATH first.

Index: third_party/electron_node/src/env.cc
--- third_party/electron_node/src/env.cc.orig
+++ third_party/electron_node/src/env.cc
@@ -35,6 +35,8 @@
 #include <optional>
 #include <unordered_map>
 
+#include <stdlib.h>
+
 namespace node {
 
 using errors::TryCatchScope;
@@ -758,29 +760,11 @@ std::unique_ptr<v8::BackingStore> Environment::release
 }
 
 std::string Environment::GetExecPath(const std::vector<std::string>& argv) {
-  char exec_path_buf[2 * PATH_MAX];
-  size_t exec_path_len = sizeof(exec_path_buf);
-  std::string exec_path;
-  if (uv_exepath(exec_path_buf, &exec_path_len) == 0) {
-    exec_path = std::string(exec_path_buf, exec_path_len);
-  } else if (!argv.empty()) {
-    exec_path = argv[0];
-  }
-
-  // On OpenBSD process.execPath will be relative unless we
-  // get the full path before process.execPath is used.
-#if defined(__OpenBSD__)
-  uv_fs_t req;
-  req.ptr = nullptr;
-  if (0 ==
-      uv_fs_realpath(nullptr, &req, exec_path.c_str(), nullptr)) {
-    CHECK_NOT_NULL(req.ptr);
-    exec_path = std::string(static_cast<char*>(req.ptr));
-  }
-  uv_fs_req_cleanup(&req);
-#endif
-
-  return exec_path;
+  char *cpath;
+  if ((cpath = getenv("ELECTRON_EXE_PATH")) != NULL)
+    return std::string(cpath);
+  else
+    return "${LOCALBASE}/electron/${ELECTRON_V}/electron";
 }
 
 Environment::Environment(IsolateData* isolate_data,
