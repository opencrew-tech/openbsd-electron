services/device/device_service.cc crash
NOTREACHED_IN_MIGRATION() << "Serial devices not supported on this platform.";

Unbreak tests.

Index: electron/spec/chromium-spec.ts
--- electron/spec/chromium-spec.ts.orig
+++ electron/spec/chromium-spec.ts
@@ -475,13 +475,13 @@ describe('command line switches', () => {
     it('should not set an invalid locale', async () => testLocale('asdfkl', `${currentLocale}|${currentSystemLocale}|${currentPreferredLanguages}`));
 
     const lcAll = String(process.env.LC_ALL);
-    ifit(process.platform === 'linux')('current process has a valid LC_ALL env', async () => {
+    ifit(['freebsd', 'linux', 'openbsd'].includes(process.platform))('current process has a valid LC_ALL env', async () => {
       // The LC_ALL env should not be set to DOM locale string.
       expect(lcAll).to.not.equal(app.getLocale());
     });
-    ifit(process.platform === 'linux')('should not change LC_ALL', async () => testLocale('fr', lcAll, true));
-    ifit(process.platform === 'linux')('should not change LC_ALL when setting invalid locale', async () => testLocale('asdfkl', lcAll, true));
-    ifit(process.platform === 'linux')('should not change LC_ALL when --lang is not set', async () => testLocale('', lcAll, true));
+    ifit(['freebsd', 'linux', 'openbsd'].includes(process.platform))('should not change LC_ALL', async () => testLocale('fr', lcAll, true));
+    ifit(['freebsd', 'linux', 'openbsd'].includes(process.platform))('should not change LC_ALL when setting invalid locale', async () => testLocale('asdfkl', lcAll, true));
+    ifit(['freebsd', 'linux', 'openbsd'].includes(process.platform))('should not change LC_ALL when --lang is not set', async () => testLocale('', lcAll, true));
   });
 
   describe('--remote-debugging-pipe switch', () => {
@@ -2965,12 +2965,12 @@ describe('font fallback', () => {
       expect(fonts[0].familyName).to.equal('Arial');
     } else if (process.platform === 'darwin') {
       expect(fonts[0].familyName).to.equal('Helvetica');
-    } else if (process.platform === 'linux') {
+    } else if (['freebsd', 'linux', 'openbsd'].includes(process.platform)) {
       expect(fonts[0].familyName).to.equal('DejaVu Sans (Fontations)');
     } // I think this depends on the distro? We don't specify a default.
   });
 
-  ifit(process.platform !== 'linux')('should fall back to Japanese font for sans-serif Japanese script', async function () {
+  ifit(!(['freebsd', 'linux', 'openbsd'].includes(process.platform)))('should fall back to Japanese font for sans-serif Japanese script', async function () {
     const html = `
     <html lang="ja-JP">
       <head>
@@ -3096,6 +3096,7 @@ describe('iframe using HTML fullscreen API while windo
   });
 });
 
+/*
 ifdescribe(process.platform !== 'darwin' || process.arch !== 'arm64')('navigator.serial', () => {
   let w: BrowserWindow;
   before(async () => {
@@ -3222,6 +3223,7 @@ ifdescribe(process.platform !== 'darwin' || process.ar
     }
   });
 });
+*/
 
 describe('window.getScreenDetails', () => {
   let w: BrowserWindow;
@@ -3522,7 +3524,7 @@ describe('paste execCommand', () => {
   });
 });
 
-ifdescribe((process.platform !== 'linux' || app.isUnityRunning()))('navigator.setAppBadge/clearAppBadge', () => {
+ifdescribe((!(['freebsd', 'linux', 'openbsd'].includes(process.platform)) || app.isUnityRunning()))('navigator.setAppBadge/clearAppBadge', () => {
   let w: BrowserWindow;
 
   const expectedBadgeCount = 42;
